---
import Layout from "../layouts/Layout.astro";
import Footer from "../components/Footer.astro";
import Navigation from "../components/Navigation.vue";
---

<Layout title="Logic Moon - Freesound Collection">
  <Navigation client:visible />

  <main class="bg-primary-500 min-h-screen">
    <section class="max-w-4xl mx-auto px-6 py-20">
      <div class="text-center mb-20">
        <div class="w-1 h-20 bg-secondary-500 mx-auto mb-8"></div>
        <h1
          class="text-6xl md:text-8xl font-light tracking-wider mb-6 text-secondary-200">
          FREESOUND
        </h1>
        <p class="text-xl font-light text-secondary-400 tracking-wide">
          Audio Collection
        </p>
        <div class="w-32 h-px bg-secondary-700 mx-auto mt-8"></div>
      </div>

      <div id="loading" class="text-center py-20 mx-auto flex flex-row justify-center align-middle" aria-live="polite" role="status">
        <div class="text-secondary-400 font-light">
          <svg
            class="w-8 h-8 text-secondary-400 animate-spin"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <circle
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-dasharray="31.416"
              stroke-dashoffset="31.416">
              <animate
                attributeName="stroke-dasharray"
                dur="2s"
                values="0 31.416;15.708 15.708;0 31.416"
                repeatCount="indefinite"></animate>
              <animate
                attributeName="stroke-dashoffset"
                dur="2s"
                values="0;-15.708;-31.416"
                repeatCount="indefinite"></animate>
            </circle>
          </svg>
          <span class="sr-only">Loading...</span>
        </div>
      </div>

      <div id="error" class="text-center py-20 text-red-500 font-light hidden" aria-live="assertive">
      </div>

      <div id="sounds-container" class="space-y-8 hidden">
        <div class="border-l border-secondary-800 pl-8">
          <h2
            class="text-2xl font-light tracking-wide mb-8 text-secondary-300 uppercase">
            Sound Collection
          </h2>
          <div id="sounds-list" class="space-y-6"></div>

          <div
            id="pagination"
            class="mt-12 flex justify-center space-x-4 hidden">
            <button
              id="prev-btn"
              class="px-6 py-2 bg-secondary-800 text-secondary-200 font-light tracking-wide uppercase hover:bg-secondary-700 transition-colors duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
              aria-label="Previous page">
              Previous
            </button>
            <span id="page-info" class="px-6 py-2 text-secondary-400 font-light"
            ></span>
            <button
              id="next-btn"
              class="px-6 py-2 bg-secondary-800 text-secondary-200 font-light tracking-wide uppercase hover:bg-secondary-700 transition-colors duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
              aria-label="Next page">
              Next
            </button>
          </div>
        </div>
      </div>
    </section>
  </main>

  <Footer />
</Layout>

<script is:inline src="/freesound.js"></script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Check if freesound library is loaded
    if (typeof window.freesound === "undefined") {
      console.error("Freesound library not loaded");
      document.getElementById("error").textContent =
        "Freesound library failed to load.";
      document.getElementById("error").classList.remove("hidden");
      document.getElementById("loading").classList.add("hidden");
      return;
    }

    // Set your API token here - REPLACE WITH YOUR ACTUAL TOKEN
    window.freesound.setToken("lm0jPCeiplRb77F9YGal0huuoQr66m3QBrPBYqsK");

    const loadingEl = document.getElementById("loading");
    const errorEl = document.getElementById("error");
    const containerEl = document.getElementById("sounds-container");
    const soundsListEl = document.getElementById("sounds-list");
    const paginationEl = document.getElementById("pagination");
    const prevBtn = document.getElementById("prev-btn");
    const nextBtn = document.getElementById("next-btn");
    const pageInfo = document.getElementById("page-info");

    let currentSounds = null;
    let currentPage = 1;

    function showError(message) {
      loadingEl.classList.add("hidden");
      containerEl.classList.add("hidden");
      errorEl.textContent = message;
      errorEl.classList.remove("hidden");
    }

    function showLoading() {
      errorEl.classList.add("hidden");
      containerEl.classList.add("hidden");
      loadingEl.classList.remove("hidden");
    }

    function showSounds() {
      loadingEl.classList.add("hidden");
      errorEl.classList.add("hidden");
      containerEl.classList.remove("hidden");
    }

    function renderSound(sound) {
      const soundEl = document.createElement("div");
      soundEl.className = "pl-6 py-4";

      const audioControls =
        sound.previews && sound.previews["preview-hq-mp3"]
          ? `<div class="mt-4">
             <audio controls class="w-full max-w-md">
               <source src="${sound.previews["preview-hq-mp3"]}" type="audio/mpeg">
             </audio>
           </div>`
          : "";

      const waveform =
        sound.images && sound.images.waveform_l
          ? `<div class="mt-4">
             <img src="${sound.images.waveform_l}" alt="Waveform" class="max-w-full h-auto opacity-70">
           </div>`
          : "";

      const tags =
        sound.tags && sound.tags.length > 0
          ? `<div class="mt-3">
             <div class="text-xs text-secondary-600 mb-2 uppercase tracking-wide">Tags</div>
             <div class="flex flex-wrap gap-2">
               ${sound.tags.map((tag) => `<span class="text-xs px-2 py-1 bg-secondary-900 text-secondary-400">${tag}</span>`).join("")}
             </div>
           </div>`
          : "";

      soundEl.innerHTML = `
        <div class="flex justify-between items-start mb-3">
          <h3 class="text-lg font-medium text-secondary-300">${sound.name}</h3>
          <a href="${sound.url}" target="_blank" class="text-xs text-secondary-600 hover:text-secondary-400 transition-colors uppercase tracking-wide">
            View on Freesound
          </a>
        </div>
        
        ${sound.description ? `<p class="text-secondary-500 text-sm leading-relaxed mb-4">${sound.description}</p>` : ""}
        
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-xs text-secondary-600">
          <div>
            <div class="text-secondary-700 uppercase tracking-wide mb-1">Duration</div>
            <div>${sound.duration ? Math.round(sound.duration) + "s" : "N/A"}</div>
          </div>
          <div>
            <div class="text-secondary-700 uppercase tracking-wide mb-1">Downloads</div>
            <div>${sound.num_downloads || 0}</div>
          </div>
          <div>
            <div class="text-secondary-700 uppercase tracking-wide mb-1">Rating</div>
            <div>${sound.avg_rating ? sound.avg_rating.toFixed(1) : "N/A"}</div>
          </div>
          <div>
            <div class="text-secondary-700 uppercase tracking-wide mb-1">License</div>
            <div>${sound.license || "N/A"}</div>
          </div>
        </div>
        
        ${tags}
        ${waveform}
        ${audioControls}
      `;

      return soundEl;
    }

    function renderSounds(sounds) {
      soundsListEl.innerHTML = "";

      if (!sounds.results || sounds.results.length === 0) {
        soundsListEl.innerHTML =
          '<div class="text-secondary-500 text-center py-8">No sounds found.</div>';
        return;
      }

      sounds.results.forEach((sound) => {
        soundsListEl.appendChild(renderSound(sound));
      });

      const totalPages = Math.ceil(sounds.count / (sounds.results.length || 1));
      pageInfo.textContent = `Page ${currentPage} of ${totalPages} (${sounds.count} total sounds)`;

      prevBtn.disabled = !sounds.previous;
      nextBtn.disabled = !sounds.next;

      if (sounds.previous || sounds.next) {
        paginationEl.classList.remove("hidden");
      }
    }

    function loadUserSounds(page = 1) {
      showLoading();
      currentPage = page;

      // FIXED: Use window.freesound instead of just freesound
      window.freesound.getUser(
        "LogicMoon",
        function (user) {
          user.sounds(
            function (sounds) {
              currentSounds = sounds;
              renderSounds(sounds);
              showSounds();
            },
            function (error) {
              console.error("Error loading sounds:", error);
              showError("Failed to load sounds. Please try again later.");
            },
            {
              fields:
                "id,name,url,description,tags,duration,num_downloads,avg_rating,license,previews,images",
              page: page,
              page_size: 15,
            }
          );
        },
        function (error) {
          console.error("Error loading user:", error);
          showError(
            "Failed to load user information. Please check if the username exists."
          );
        }
      );
    }

    prevBtn.addEventListener("click", function () {
      if (currentSounds && currentSounds.previous) {
        currentSounds.previousPage(
          function (sounds) {
            currentSounds = sounds;
            currentPage--;
            renderSounds(sounds);
            window.scrollTo({ top: 0, behavior: "smooth" });
          },
          function (error) {
            console.error("Error loading previous page:", error);
            showError("Failed to load previous page.");
          }
        );
      }
    });

    nextBtn.addEventListener("click", function () {
      if (currentSounds && currentSounds.next) {
        currentSounds.nextPage(
          function (sounds) {
            currentSounds = sounds;
            currentPage++;
            renderSounds(sounds);
            window.scrollTo({ top: 0, behavior: "smooth" });
          },
          function (error) {
            console.error("Error loading next page:", error);
            showError("Failed to load next page.");
          }
        );
      }
    });

    loadUserSounds();
  });
</script>

<style>
  audio {
    filter: sepia(100%) saturate(0%) hue-rotate(0deg) brightness(0.8)
      contrast(1.2);
  }

  audio::-webkit-media-controls-panel {
    background-color: #1f2937;
  }
</style>
